#if UNITY_EDITOR
using System;
using System.Reflection;
using System.Text.RegularExpressions;
using JetBrains.Annotations;
using Systems.SimpleCore.Automation.Attributes;
using Systems.SimpleCore.Editor.Utility;
using UnityEditor;
using UnityEngine;

namespace Systems.SimpleCore.Editor.Automation
{
    /// <summary>
    ///     Script used to automatically create ScriptableObjects
    /// </summary>
    [InitializeOnLoad] public static class AutoGeneratedScriptableObjectCreator
    {
        /// <summary>
        ///     Processes all objects in the project
        /// </summary>
        private static void ProcessAllObjects()
        {
            bool anyObjectChanged = false;

            // Loop through all assemblies in project
            for (int i = 0; i < AppDomain.CurrentDomain.GetAssemblies().Length; i++)
            {
                Assembly assembly = AppDomain.CurrentDomain.GetAssemblies()[i];

                // Loop through all types in assembly
                Type[] types = assembly.GetTypes();
                for (int index = 0; index < types.Length; index++)
                {
                    Type type = types[index];
                    // Check if type is a ScriptableObject, if not, skip
                    if (!typeof(ScriptableObject).IsAssignableFrom(type)) continue;
                    if (!BuildObject(type)) continue;
                    anyObjectChanged = true;
                }
            }

            // Save and refresh if any object was changed
            if (!anyObjectChanged) return;
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }

        private static bool BuildObject([NotNull] Type type)
        {
            // Check if not abstract nor interface
            if (type.IsAbstract || type.IsInterface) return false;

            // Check if object has AutoCreatedObject attribute
            AutoCreateAttribute attribute = type.GetCustomAttribute<AutoCreateAttribute>(true);
            if (attribute == null) return false;

            string typeName = type.Name;

            // Remove invalid characters from type name
            Regex rgx = new("[^a-zA-Z0-9 -]");
            typeName = rgx.Replace(typeName, "");

            string directory = "Assets/Generated/" + attribute.Path;
            string path = directory + "/" + typeName + ".asset";
 

            // Ensure directory exists
            if (!System.IO.Directory.Exists(directory))
            {
                System.IO.Directory.CreateDirectory(directory);
                AssetDatabase.Refresh();
            }

            // Try load existing asset
            UnityEngine.Object existing =
                AssetDatabase.LoadAssetAtPath(path, typeof(ScriptableObject));
            ScriptableObject instance = null;

            if (existing != null)
            {
                // Check if type matches
                if (existing.GetType() == type)
                {
                    instance = (ScriptableObject) existing;
                }
                else
                {
                    Debug.LogError(
                        $"Found existing asset of type {existing.GetType().FullName} at {path} which is not " +
                        $"valid for type {type.FullName}");
                    return false;
                }
            }

            // Create new instance if not found
            if (instance == null)
            {
                instance = ScriptableObject.CreateInstance(type);

                // Create asset
                AssetDatabase.CreateAsset(instance, path);
                AssetDatabase.SaveAssets();
                AssetDatabase.Refresh();

                Debug.Log($"Created ScriptableObject of type {type.FullName} at {path}");
            }

            // Check if instance is null  
            if (instance == null)
            {
                Debug.LogError($"Failed to create ScriptableObject of type {type.FullName}");
                return false; 
            }  

            // Mark asset as addressable
            AddressableExtensions.MarkAssetAddressable(path, attribute.Path, label: attribute.Label);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            return true;
        }

        static AutoGeneratedScriptableObjectCreator()
        {
            // Auto-generate all objects on domain reload
            ProcessAllObjects();
        }
    }
}
#endif